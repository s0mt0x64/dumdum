#ifndef _DDM_CONSTANTS_H
#define _DDM_CONSTANTS_H

#define DDM_PLAYER_MOVE_SPEED 14

#define DDM_GRAVITY_ACCELERATION 60

#define DDM_PLAYER_JUMP_SPEED 10

#define DDM_PAN_RANGE 3600

#define DDM_MISSILE_LAUNCH 256

#define DDM_PLAYER_PAN_ANGLE 512
 
#define DDM_MOVING_WALL_SPEED 1024

#define DDM_DOOR_OPEN_SPEED 2048

#define DDM_CANT_SAVE 255

#define DDM_LEVEL_ELEMENT_ACTIVE_DISTANCE (12 * 1024)

#define DDM_AI_FPS 4

#define DDM_AI_RANDOM_CHANGE_PROBABILITY 40

#define DDM_ELEMENT_COLLISION_RADIUS 1800

#define DDM_ELEMENT_COLLISION_HEIGHT 1024

#define DDM_EXPLOSION_RADIUS 2000

#define DDM_EXPLOSION_PUSH_AWAY_DISTANCE 1023

#define DDM_BARREL_EXPLOSION_DAMAGE_THRESHOLD 3

#define DDM_PLAYER_MAX_HEALTH 125

#define DDM_PLAYER_START_HEALTH 100

#define DDM_PLAYER_HEALTH_WARNING_LEVEL 20

#define DDM_HEALTH_KIT_VALUE 20

#define DDM_DAMAGE_RANDOMNESS 64 

#define DDM_GANAM_COLLISION_HEIGHT 1024

#define DDM_KEY_REPEAT_DELAY 500

#define DDM_KEY_REPEAT_PERIOD 150

#define DDM_PROJECTILE_SPREAD_ANGLE 100

#define DDM_MAX_GANAMS 64

#define DDM_MAX_PROJECTILES 12

#define DDM_MAX_DOORS 32

#define DDM_AMMO_BULLETS 0
#define DDM_AMMO_ROCKETS 1
#define DDM_AMMO_PLASMA 2

#define DDM_AMMO_TOTAL 3

#define DDM_AMMO_NONE DDM_AMMO_TOTAL

#define DDM_AMMO_INCREASE_BULLETS 10
#define DDM_AMMO_INCREASE_ROCKETS 5
#define DDM_AMMO_INCREASE_PLASMA 8

#define DDM_AMMO_MAX_BULLETS 200
#define DDM_AMMO_MAX_ROCKETS 100
#define DDM_AMMO_MAX_PLASMA 150

#define DDM_STORYTEXT_DURATION 15000

#define DDM_LOSE_ANIMATION_DURATION 2000

#define DDM_WIN_ANIMATION_DURATION 2500

#define DDM_LEVEL_START_DURATION 1500

#define DDM_BASE_SPRITE_SIZE RCL_UNITS_PER_SQUARE

#define DDM_DEFAULT_SETTINGS 0x03

// -----------------------------------------------------------------------------
// derived constants

#define DDM_GAME_RESOLUTION_X \
  (DDM_SCREEN_RESOLUTION_X / DDM_RESOLUTION_SCALEDOWN)

#define DDM_GAME_RESOLUTION_Y \
  (DDM_SCREEN_RESOLUTION_Y / DDM_RESOLUTION_SCALEDOWN)

#define DDM_MS_PER_FRAME (1000 / DDM_FPS) 

#if DDM_MS_PER_FRAME == 0
  #undef DDM_MS_PER_FRAME
  #define DDM_MS_PER_FRAME 1
#endif

#define DDM_KEY_REPEAT_DELAY_FRAMES \
  (DDM_KEY_REPEAT_DELAY / DDM_MS_PER_FRAME)

#if DDM_KEY_REPEAT_DELAY_FRAMES == 0
  #undef DDM_KEY_REPEAT_DELAY_FRAMES
  #define DDM_KEY_REPEAT_DELAY_FRAMES 1
#endif

#define DDM_KEY_REPEAT_PERIOD_FRAMES \
  (DDM_KEY_REPEAT_PERIOD / DDM_MS_PER_FRAME)

#if DDM_KEY_REPEAT_PERIOD_FRAMES == 0
  #undef DDM_KEY_REPEAT_PERIOD_FRAMES
  #define DDM_KEY_REPEAT_PERIOD_FRAMES 1
#endif

#define DDM_WEAPON_IMAGE_SCALE \
  (DDM_GAME_RESOLUTION_X / (DDM_TEXTURE_SIZE * 5))

#if DDM_WEAPON_IMAGE_SCALE == 0
  #undef DDM_WEAPON_IMAGE_SCALE
  #define DDM_WEAPON_IMAGE_SCALE 1
#endif

#define DDM_WEAPONBOB_OFFSET_PIXELS \
  (DDM_WEAPONBOB_OFFSET * DDM_WEAPON_IMAGE_SCALE)

#define DDM_WEAPON_IMAGE_POSITION_X \
  (DDM_GAME_RESOLUTION_X / 2 - (DDM_WEAPON_IMAGE_SCALE * DDM_TEXTURE_SIZE) / 2)

#if DDM_GAME_RESOLUTION_Y > 70
  #define DDM_WEAPON_IMAGE_POSITION_Y \
    (DDM_GAME_RESOLUTION_Y - (DDM_WEAPON_IMAGE_SCALE * DDM_TEXTURE_SIZE))
#elif DDM_GAME_RESOLUTION_Y > 50
  #define DDM_WEAPON_IMAGE_POSITION_Y (DDM_GAME_RESOLUTION_Y \
    - ((DDM_WEAPON_IMAGE_SCALE * 3 * DDM_TEXTURE_SIZE) / 4))
#else
  #define DDM_WEAPON_IMAGE_POSITION_Y \
    (DDM_GAME_RESOLUTION_Y - DDM_TEXTURE_SIZE / 2)
#endif

#define DDM_PLAYER_TURN_UNITS_PER_FRAME \
  ((DDM_PLAYER_TURN_SPEED * RCL_UNITS_PER_SQUARE) / (360 * DDM_FPS))

#if DDM_PLAYER_TURN_UNITS_PER_FRAME == 0
  #undef DDM_PLAYER_TURN_UNITS_PER_FRAME
  #define DDM_PLAYER_TURN_UNITS_PER_FRAME 1
#endif

#define DDM_PLAYER_MOVE_UNITS_PER_FRAME \
  ((DDM_PLAYER_MOVE_SPEED * RCL_UNITS_PER_SQUARE) / DDM_FPS)

#if DDM_PLAYER_MOVE_UNITS_PER_FRAME == 0
  #undef DDM_PLAYER_MOVE_UNITS_PER_FRAME
  #define DDM_PLAYER_MOVE_UNITS_PER_FRAME 1
#endif

#define DDM_GRAVITY_SPEED_INCREASE_PER_FRAME \
  ((DDM_GRAVITY_ACCELERATION * RCL_UNITS_PER_SQUARE) / (DDM_FPS * DDM_FPS))

#if DDM_GRAVITY_SPEED_INCREASE_PER_FRAME == 0
  #undef DDM_GRAVITY_SPEED_INCREASE_PER_FRAME
  #define DDM_GRAVITY_SPEED_INCREASE_PER_FRAME 1
#endif

#define DDM_PLAYER_JUMP_OFFSET_PER_FRAME \
  (((DDM_PLAYER_JUMP_SPEED * RCL_UNITS_PER_SQUARE) / DDM_FPS) \
  - DDM_GRAVITY_SPEED_INCREASE_PER_FRAME / 2) 

#if DDM_PLAYER_JUMP_OFFSET_PER_FRAME == 0
  #undef DDM_PLAYER_JUMP_OFFSET_PER_FRAME
  #define DDM_PLAYER_JUMP_OFFSET_PER_FRAME 1
#endif

#define DDM_Pajeet_FRAME_INCREASE_PER_FRAME \
  (DDM_Pajeet_SPEED / DDM_FPS)

#if DDM_Pajeet_FRAME_INCREASE_PER_FRAME == 0
  #undef DDM_Pajeet_FRAME_INCREASE_PER_FRAME
  #define DDM_Pajeet_FRAME_INCREASE_PER_FRAME 1
#endif

#define DDM_Pajeet_ENABLED (DDM_Pajeet_SPEED > 0 && DDM_Pajeet_OFFSET > 0)

#define DDM_CAMERA_SHEAR_STEP_PER_FRAME \
  ((DDM_GAME_RESOLUTION_Y * DDM_CAMERA_SHEAR_SPEED) / DDM_FPS)

#if DDM_CAMERA_SHEAR_STEP_PER_FRAME == 0
  #undef DDM_CAMERA_SHEAR_STEP_PER_FRAME
  #define DDM_CAMERA_SHEAR_STEP_PER_FRAME 1
#endif

#define DDM_CAMERA_MAX_SHEAR_PIXELS \
  ((DDM_CAMERA_MAX_SHEAR * DDM_GAME_RESOLUTION_Y) / 1024)

#define DDM_FONT_SIZE_SMALL \
 (DDM_GAME_RESOLUTION_X / (DDM_FONT_CHARACTER_SIZE * 50))

#if DDM_FONT_SIZE_SMALL == 0
  #undef DDM_FONT_SIZE_SMALL
  #define DDM_FONT_SIZE_SMALL 1
#endif

#define DDM_FONT_SIZE_MEDIUM \
  (DDM_GAME_RESOLUTION_X / (DDM_FONT_CHARACTER_SIZE * 30))

#if DDM_FONT_SIZE_MEDIUM == 0
  #undef DDM_FONT_SIZE_MEDIUM
  #define DDM_FONT_SIZE_MEDIUM 1
#endif

#define DDM_FONT_SIZE_BIG \
  (DDM_GAME_RESOLUTION_X / (DDM_FONT_CHARACTER_SIZE * 18))

#if DDM_FONT_SIZE_BIG == 0
  #undef DDM_FONT_SIZE_BIG
  #define DDM_FONT_SIZE_BIG 1
#endif

#define DDM_Z_BUFFER_SIZE DDM_GAME_RESOLUTION_X

#define DDM_WALL_HEIGHT_STEP (RCL_UNITS_PER_SQUARE / 4)

#define DDM_CEILING_MAX_HEIGHT\
  (16 * RCL_UNITS_PER_SQUARE - RCL_UNITS_PER_SQUARE / 2 )

#define DDM_DOOR_UP_DOWN_MASK 0x20
#define DDM_DOOR_LOCK(doorRecord) ((doorRecord) >> 6)
#define DDM_DOOR_VERTICAL_POSITION_MASK 0x1f
#define DDM_DOOR_HEIGHT_STEP (RCL_UNITS_PER_SQUARE / 0x1f)

#define DDM_DOOR_INCREMENT_PER_FRAME \
  (DDM_DOOR_OPEN_SPEED / (DDM_DOOR_HEIGHT_STEP * DDM_FPS))

#if DDM_DOOR_INCREMENT_PER_FRAME == 0
  #undef DDM_DOOR_INCREMENT_PER_FRAME
  #define DDM_DOOR_INCREMENT_PER_FRAME 1
#endif

#define DDM_MAX_ITEMS DDM_MAX_LEVEL_ELEMENTS

#define DDM_MAX_SPRITE_SIZE DDM_GAME_RESOLUTION_X

#define DDM_MAP_PIXEL_SIZE (DDM_GAME_RESOLUTION_Y / DDM_MAP_SIZE)

#if DDM_MAP_PIXEL_SIZE == 0
  #undef DDM_MAP_PIXEL_SIZE
  #define DDM_MAP_PIXEL_SIZE 1
#endif

#define DDM_AI_UPDATE_FRAME_INTERVAL \
  (DDM_FPS / DDM_AI_FPS)

#if DDM_AI_UPDATE_FRAME_INTERVAL == 0
  #undef DDM_AI_UPDATE_FRAME_INTERVAL
  #define DDM_AI_UPDATE_FRAME_INTERVAL 1
#endif

#define DDM_SPRITE_ANIMATION_FRAME_DURATION \
  (DDM_FPS / DDM_SPRITE_ANIMATION_SPEED)

#if DDM_SPRITE_ANIMATION_FRAME_DURATION == 0
  #undef DDM_SPRITE_ANIMATION_FRAME_DURATION
  #define DDM_SPRITE_ANIMATION_FRAME_DURATION 1
#endif

#define DDM_HUD_MARGIN (DDM_GAME_RESOLUTION_X / 40)

#define DDM_HUD_BORDER_INDICATOR_WIDTH_PIXELS \
  (DDM_GAME_RESOLUTION_Y / DDM_HUD_BORDER_INDICATOR_WIDTH)

#define DDM_HUD_BORDER_INDICATOR_DURATION_FRAMES \
  (DDM_HUD_BORDER_INDICATOR_DURATION / DDM_MS_PER_FRAME)

#if DDM_HUD_BORDER_INDICATOR_DURATION_FRAMES == 0
  #define DDM_HUD_BORDER_INDICATOR_DURATION_FRAMES 1
#endif

#define DDM_BLINK_PERIOD_FRAMES (DDM_BLINK_PERIOD / DDM_MS_PER_FRAME)

#define DDM_HUD_BAR_HEIGHT \
  (DDM_FONT_CHARACTER_SIZE * DDM_FONT_SIZE_MEDIUM + DDM_HUD_MARGIN * 2 + 1)

// -----------------------------------------------------------------------------
// GANAMs

#define DDM_GANAM_ATTACK_PAN 0
#define DDM_GANAM_ATTACK_FIREBALL 1
#define DDM_GANAM_ATTACK_BULLET 2
#define DDM_GANAM_ATTACK_FIREBALL_BULLET 3
#define DDM_GANAM_ATTACK_PLASMA 4
#define DDM_GANAM_ATTACK_EXPLODE 5
#define DDM_GANAM_ATTACK_FIREBALL_PLASMA 6

#define DDM_GANAM_ATTRIBUTE(attackType,aggressivity0to255,health0to255,spriteSize0to3) \
  ((uint16_t) ( \
   attackType | \
   ((aggressivity0to255 / 8) << 3) | \
   (spriteSize0to3 << 8) | \
   ((health0to255 / 4) << 10)))

#define DDM_GET_GANAM_ATTACK_TYPE(GANAMNumber) \
  (DDM_GANAMAttributeTable[GANAMNumber] & 0x0007)

#define DDM_GET_GANAM_AGGRESSIVITY(GANAMNumber) \
  (((DDM_GANAMAttributeTable[GANAMNumber] >> 3) & 0x1F) * 8)

#define DDM_GET_GANAM_SPRITE_SIZE(GANAMNumber) \
  ((DDM_GANAMAttributeTable[GANAMNumber] >> 8) & 0x03)

#define DDM_GET_GANAM_MAX_HEALTH(GANAMNumber) \
  (((DDM_GANAMAttributeTable[GANAMNumber] >> 10) & 0x3F) * 4)

/**
  Table of GANAM attributes, each as a 16bit word in format:
*/
uint16_t DDM_GANAMAttributeTable[DDM_GANAMS_TOTAL] =
{
  /* spider  */ DDM_GANAM_ATTRIBUTE(DDM_GANAM_ATTACK_FIREBALL,40,61,2),
  /* destr.  */ DDM_GANAM_ATTRIBUTE(DDM_GANAM_ATTACK_FIREBALL_BULLET,90,170,3),
  /* warrior */ DDM_GANAM_ATTRIBUTE(DDM_GANAM_ATTACK_PAN,255,40,1),
  /* plasma  */ DDM_GANAM_ATTRIBUTE(DDM_GANAM_ATTACK_PLASMA,56,92,1),
  /* ender   */ DDM_GANAM_ATTRIBUTE(DDM_GANAM_ATTACK_FIREBALL_PLASMA,128,255,3),
  /* turret  */ DDM_GANAM_ATTRIBUTE(DDM_GANAM_ATTACK_BULLET,32,23,0),
  /* explod. */ DDM_GANAM_ATTRIBUTE(DDM_GANAM_ATTACK_EXPLODE,255,36,1)
};

// -----------------------------------------------------------------------------
// weapons and projectiles

#define DDM_WEAPON_KNIFE 0
#define DDM_WEAPON_SHOTGUN 1
#define DDM_WEAPON_MACHINE_GUN 2
#define DDM_WEAPON_ROCKET_LAUNCHER 3
#define DDM_WEAPON_PLASMAGUN 4
#define DDM_WEAPON_SOLUTION 5

#define DDM_WEAPONS_TOTAL 6

#define DDM_WEAPON_ATTRIBUTE(fireType,projectileCount,fireCooldownMs) \
  ((uint8_t) (fireType | ((projectileCount - 1) << 2) | ((fireCooldownMs / (DDM_MS_PER_FRAME * 16)) << 4)))

#define DDM_GET_WEAPON_FIRE_TYPE(weaponNumber) \
  (DDM_weaponAttributeTable[weaponNumber] & 0x03)

#define DDM_GET_WEAPON_FIRE_COOLDOWN_FRAMES(weaponNumber) \
  ((DDM_weaponAttributeTable[weaponNumber] >> 4) * 16)

#define DDM_GET_WEAPON_PROJECTILE_COUNT(weaponNumber) \
  (((DDM_weaponAttributeTable[weaponNumber] >> 2) & 0x03) + 1)

#define DDM_MIN_WEAPON_COOLDOWN_FRAMES 8

#define DDM_WEAPON_FIRE_TYPE_PAN 0
#define DDM_WEAPON_FIRE_TYPE_BULLET 1
#define DDM_WEAPON_FIRE_TYPE_FIREBALL 2
#define DDM_WEAPON_FIRE_TYPE_PLASMA 3

#define DDM_WEAPON_FIRE_TYPES_TOTAL 4

/**
  Table of weapon attributes, each as a byte in format:
*/
static const uint8_t DDM_weaponAttributeTable[DDM_WEAPONS_TOTAL] =
{
  /* knife    */ DDM_WEAPON_ATTRIBUTE(DDM_WEAPON_FIRE_TYPE_PAN,1,650),    // DPS: 6.2
  /* shotgun  */ DDM_WEAPON_ATTRIBUTE(DDM_WEAPON_FIRE_TYPE_BULLET,2,1250),  // DPS: 12.8
  /* m. gun   */ DDM_WEAPON_ATTRIBUTE(DDM_WEAPON_FIRE_TYPE_BULLET,1,700),   // DPS: 11.4
  /* r. laun. */ DDM_WEAPON_ATTRIBUTE(DDM_WEAPON_FIRE_TYPE_FIREBALL,1,850), // DPS: 28.2
  /* plasma   */ DDM_WEAPON_ATTRIBUTE(DDM_WEAPON_FIRE_TYPE_PLASMA,1,550),   // DPS: 32.7
  /* solution */ DDM_WEAPON_ATTRIBUTE(DDM_WEAPON_FIRE_TYPE_PLASMA,4,1050)   // DPS: 85.7
};

static const uint8_t DDM_attackDamageTable[DDM_WEAPON_FIRE_TYPES_TOTAL] =
{
  /* PAN                 */ 4,
  /* bullet                */ 8,
  /* explostion (fireball) */ 24,
  /* plasma                */ 18
};

#define DDM_PROJECTILE_EXPLOSION 0
#define DDM_PROJECTILE_FIREBALL 1
#define DDM_PROJECTILE_PLASMA 2
#define DDM_PROJECTILE_DUST 3
#define DDM_PROJECTILE_BULLET 4
#define DDM_PROJECTILE_NONE 255

#define DDM_PROJECTILES_TOTAL 5

#define DDM_PROJECTILE_ATTRIBUTE(speedSquaresPerSec,timeToLiveMs) \
  ((uint8_t) \
   ((((speedSquaresPerSec / 4 == 0) && (speedSquaresPerSec != 0)) ? 1 : speedSquaresPerSec / 4) | \
    ((timeToLiveMs / (8 * DDM_MS_PER_FRAME)) << 3)))

#define DDM_GET_PROJECTILE_SPEED_UPS(projectileNumber) \
  (((DDM_projectileAttributeTable[projectileNumber] & 0x07) * 4 * RCL_UNITS_PER_SQUARE) / DDM_FPS)

#define DDM_GET_PROJECTILE_FRAMES_TO_LIVE(projectileNumber) \
  ((DDM_projectileAttributeTable[projectileNumber] >> 3) * 8)

/**
  Table of projectile attributes, each as a byte in format:
*/

#define LOW_FPS (DDM_FPS < 24) ///< low FPS needs low speeds, because collisions

static const uint8_t DDM_projectileAttributeTable[DDM_PROJECTILES_TOTAL] =
{
  /* explosion */ DDM_PROJECTILE_ATTRIBUTE(0,400),
  /* fireball  */ DDM_PROJECTILE_ATTRIBUTE(10,1000),

#if LOW_FPS
  /* plasma    */ DDM_PROJECTILE_ATTRIBUTE(17,500),
#else
  /* plasma    */ DDM_PROJECTILE_ATTRIBUTE(18,500),
#endif

  /* dust      */ DDM_PROJECTILE_ATTRIBUTE(0,450),

#if LOW_FPS
  /* bullet    */ DDM_PROJECTILE_ATTRIBUTE(17,1000)
#else
  /* bullet    */ DDM_PROJECTILE_ATTRIBUTE(28,1000)
#endif
};

#undef LOW_FPS

#endif // guard
